%lang starknet
from starkware.cairo.common.alloc import alloc
from starkware.cairo.common.default_dict import default_dict_new, default_dict_finalize
from starkware.cairo.common.dict_access import DictAccess
from starkware.cairo.common.dict import dict_write, dict_read

@external
func test_array{range_check_ptr}():
    alloc_locals
    let (ticks : felt*) = alloc()

    let (local my_dict_start) = default_dict_new(default_value=0)
    let my_dict = my_dict_start
    # let (finalized_dict_start, finalized_dict_end) = default_dict_finalize(
    #    my_dict_start, my_dict, 0
    # )
    dict_write{dict_ptr=my_dict}(key=0, new_value=1000)
    dict_write{dict_ptr=my_dict}(key=1, new_value=1100)
    dict_write{dict_ptr=my_dict}(key=2, new_value=1200)
    dict_write{dict_ptr=my_dict}(key=3, new_value=1300)
    dict_write{dict_ptr=my_dict}(key=4, new_value=1400)
    %{ print(__dict_manager.get_dict(ids.my_dict)) %}

    # first update
    let b = 0
    let (before_last_p) = dict_read{dict_ptr=my_dict}(key=b + 1)
    let next_price = 1500
    dict_write{dict_ptr=my_dict}(key=0, new_value=before_last_p)
    dict_write{dict_ptr=my_dict}(key=b + 1, new_value=next_price)
    let b = b + 1
    %{ print(__dict_manager.get_dict(ids.my_dict)) %}

    # 2nd update
    let (before_last_p) = dict_read{dict_ptr=my_dict}(key=b + 1)
    let next_price = 1600
    dict_write{dict_ptr=my_dict}(key=0, new_value=before_last_p)
    dict_write{dict_ptr=my_dict}(key=b + 1, new_value=next_price)
    let b = b + 1
    %{ print(__dict_manager.get_dict(ids.my_dict)) %}

    # 3
    let (before_last_p) = dict_read{dict_ptr=my_dict}(key=b + 1)
    let next_price = 1700
    dict_write{dict_ptr=my_dict}(key=0, new_value=before_last_p)
    dict_write{dict_ptr=my_dict}(key=b + 1, new_value=next_price)
    let b = b + 1
    %{ print(__dict_manager.get_dict(ids.my_dict)) %}

    # 4
    let (before_last_p) = dict_read{dict_ptr=my_dict}(key=b + 1)
    let next_price = 1800
    dict_write{dict_ptr=my_dict}(key=0, new_value=before_last_p)
    dict_write{dict_ptr=my_dict}(key=b + 1, new_value=next_price)
    let b = b + 1
    %{ print(__dict_manager.get_dict(ids.my_dict)) %}
    assert 1 = 1
    return ()
end
