# SPDX-License-Identifier: MIT
# OpenZeppelin Cairo Contracts v0.1.0 (token/erc721/ERC721_Mintable_Burnable.cairo)

%lang starknet

from starkware.cairo.common.cairo_builtins import HashBuiltin, SignatureBuiltin
from starkware.cairo.common.uint256 import Uint256

from openzeppelin.token.erc721.library import (
    ERC721_name,
    ERC721_symbol,
    ERC721_balanceOf,
    ERC721_ownerOf,
    ERC721_getApproved,
    ERC721_isApprovedForAll,
    ERC721_tokenURI,

    ERC721_initializer,
    ERC721_approve, 
    ERC721_setApprovalForAll, 
    ERC721_transferFrom,
    ERC721_safeTransferFrom,
    ERC721_mint,
    ERC721_burn,
    ERC721_only_token_owner,
    ERC721_setTokenURI
)

#We import the libraries to check for inequalities:
from starkware.cairo.common.math import (
    assert_not_zero, assert_not_equal, assert_lt
)

#We import the library for checking the get_caller_address:
from starkware.starknet.common.syscalls import get_caller_address

from openzeppelin.introspection.ERC165 import ERC165_supports_interface

from openzeppelin.access.ownable import (
    Ownable_initializer,
    Ownable_only_owner
)

#Structure

struct Animal:
    member legs: felt
    member sex: felt
    member wings: felt
end

#Storage

@storage_var
func animals(token_id: felt) -> (animal: Animal):
end

@storage_var
func next_token_id() -> (next_token_id: felt):
end

@storage_var
func is_breeder_map(account: felt) -> (is_breeder: felt):
end

@storage_var
func is_animal_dead(token_id: felt) -> (is_dead: felt):
end


#
# Constructor
#

@constructor
func constructor{
        syscall_ptr : felt*, 
        pedersen_ptr : HashBuiltin*,
        range_check_ptr
    }(
        name: felt,
        symbol: felt,
        owner: felt
    ):
    ERC721_initializer(name, symbol)
    Ownable_initializer(owner)
    return ()
end


#
# Getters
#
@view
func get_animal_characteristics{
        syscall_ptr : felt*,
        pedersen_ptr : HashBuiltin*,
        range_check_ptr
    }(token_id: Uint256) -> (legs: felt, sex: felt, wings: felt):
    let (animal) = animals.read(token_id=token_id.low)
    return (animal.legs, animal.sex, animal.wings)
end


@view
func supportsInterface{
        syscall_ptr : felt*,
        pedersen_ptr : HashBuiltin*,
        range_check_ptr
    }(interfaceId: felt) -> (success: felt):
    let (success) = ERC165_supports_interface(interfaceId)
    return (success)
end

@view
func name{
        syscall_ptr : felt*,
        pedersen_ptr : HashBuiltin*,
        range_check_ptr
    }() -> (name: felt):
    let (name) = ERC721_name()
    return (name)
end

@view
func symbol{
        syscall_ptr : felt*,
        pedersen_ptr : HashBuiltin*,
        range_check_ptr
    }() -> (symbol: felt):
    let (symbol) = ERC721_symbol()
    return (symbol)
end

@view
func balanceOf{
        syscall_ptr : felt*, 
        pedersen_ptr : HashBuiltin*,
        range_check_ptr
    }(owner: felt) -> (balance: Uint256):
    let (balance: Uint256) = ERC721_balanceOf(owner)
    return (balance)
end

@view
func ownerOf{
        syscall_ptr : felt*, 
        pedersen_ptr : HashBuiltin*,
        range_check_ptr
    }(tokenId: Uint256) -> (owner: felt):
    let (owner: felt) = ERC721_ownerOf(tokenId)
    return (owner)
end

@view
func getApproved{
        syscall_ptr : felt*, 
        pedersen_ptr : HashBuiltin*,
        range_check_ptr
    }(tokenId: Uint256) -> (approved: felt):
    let (approved: felt) = ERC721_getApproved(tokenId)
    return (approved)
end

@view
func isApprovedForAll{
        syscall_ptr : felt*, 
        pedersen_ptr : HashBuiltin*,
        range_check_ptr
    }(owner: felt, operator: felt) -> (isApproved: felt):
    let (isApproved: felt) = ERC721_isApprovedForAll(owner, operator)
    return (isApproved)
end

@view
func tokenURI{
        syscall_ptr: felt*, 
        pedersen_ptr: HashBuiltin*, 
        range_check_ptr
    }(tokenId: Uint256) -> (tokenURI: felt):
    let (tokenURI: felt) = ERC721_tokenURI(tokenId)
    return (tokenURI)
end


#
# Externals
#

@external
func approve{
        pedersen_ptr: HashBuiltin*, 
        syscall_ptr: felt*, 
        range_check_ptr
    }(to: felt, tokenId: Uint256):
    ERC721_approve(to, tokenId)
    return ()
end

@external
func setApprovalForAll{
        syscall_ptr: felt*, 
        pedersen_ptr: HashBuiltin*, 
        range_check_ptr
    }(operator: felt, approved: felt):
    ERC721_setApprovalForAll(operator, approved)
    return ()
end

@external
func transferFrom{
        pedersen_ptr: HashBuiltin*, 
        syscall_ptr: felt*, 
        range_check_ptr
    }(
        from_: felt, 
        to: felt, 
        tokenId: Uint256
    ):
    ERC721_transferFrom(from_, to, tokenId)
    return ()
end

@external
func safeTransferFrom{
        pedersen_ptr: HashBuiltin*, 
        syscall_ptr: felt*, 
        range_check_ptr
    }(
        from_: felt, 
        to: felt, 
        tokenId: Uint256,
        data_len: felt, 
        data: felt*
    ):
    ERC721_safeTransferFrom(from_, to, tokenId, data_len, data)
    return ()
end

@external
func setTokenURI{
        pedersen_ptr: HashBuiltin*, 
        syscall_ptr: felt*, 
        range_check_ptr
    }(tokenId: Uint256, tokenURI: felt):
    Ownable_only_owner()
    ERC721_setTokenURI(tokenId, tokenURI)
    return ()
end

@external
func mint{
        pedersen_ptr: HashBuiltin*, 
        syscall_ptr: felt*, 
        range_check_ptr
    }(to: felt, tokenId: Uint256):
    Ownable_only_owner()
    ERC721_mint(to, tokenId)
    return ()
end

@external
func burn{
        pedersen_ptr: HashBuiltin*, 
        syscall_ptr: felt*, 
        range_check_ptr
    }(tokenId: Uint256):
    ERC721_only_token_owner(tokenId)
    ERC721_burn(tokenId)
    return ()
end




#function write characteristics2
#@external
#func write_animal_characteristics{
#        pedersen_ptr: HashBuiltin*, 
#        syscall_ptr: felt*, 
#        range_check_ptr
#    }(token_id: Uint256):
#    animals.write(token_id=token_id.low, animal.sex = 49, animal.legs = 52, animal.wings = 49)
#    let (animal.sex = 49)
#    let (animal.legs = 52)
#    let (animal.wings = 49)    
#    return ()
#end


#function write characteristics
#@external
#func write_animal_characteristics{
#        syscall_ptr : felt*, 
#        pedersen_ptr : HashBuiltin*, 
#        range_check_ptr
#        }(sex:  felt, legs:  felt, wings:  felt) -> (token_id: Uint256):
#    animals.write(
#    token_id=token_id, 
#    value=Animal(sex=sex, legs=legs, wings=wings)
#    )
#    return (Uint256(token_id, 0))
#end

@external
func register_me_as_breeder{pedersen_ptr: HashBuiltin*, syscall_ptr: felt*, range_check_ptr}(
        ) -> (is_added:  felt):
    # Check that the caller is not zero
    let (caller_address) = get_caller_address()
    assert_not_zero(caller_address)
    # Register as breeder
    is_breeder_map.write(account=caller_address, value=1)
    return (is_added=1)
end

@external
func declare_animal{pedersen_ptr: HashBuiltin*, syscall_ptr: felt*, range_check_ptr}(
        legs: felt, sex: felt, wings: felt) -> (token_id: Uint256):
    # Check that the caller is not zero
    let (caller_address) = get_caller_address()
    assert_not_zero(caller_address)

    let (token_id) = next_token_id.read()
    
    # Store the animal properties
    animals.write(
        token_id=token_id, 
        value=Animal(legs=legs, sex=sex, wings=wings)
    )

    # Mint the token
    ERC721_mint(caller_address, Uint256(token_id, 0))

    # Update the next token id
    let (token_id) = next_token_id.read()
    next_token_id.write(token_id + 1)

    return (Uint256(token_id, 0))
end

@external
func declare_dead_animal{pedersen_ptr: HashBuiltin*, syscall_ptr: felt*, range_check_ptr}(
        token_id:  Uint256):
    # Ensures token_id is valid
    #let (exists) = _exists(token_id)
    #assert exists = 1
    # Set the animal dead
    is_animal_dead.write(token_id=(token_id.low), value=1)
    return ()
end
