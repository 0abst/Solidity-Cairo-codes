%lang starknet

from warplib.maths.external_input_check_address import warp_external_input_check_address
from starkware.cairo.common.cairo_builtins import HashBuiltin
from starkware.starknet.common.syscalls import get_caller_address
from warplib.maths.eq import warp_eq

func WS0_READ_felt{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr : felt}(
    loc : felt
) -> (val : felt):
    alloc_locals
    let (read0) = WARP_STORAGE.read(loc)
    return (read0)
end

func WS_WRITE0{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr : felt}(
    loc : felt, value : felt
) -> (res : felt):
    WARP_STORAGE.write(loc, value)
    return (value)
end

@storage_var
func WARP_MAPPING0(name : felt, index : felt) -> (resLoc : felt):
end
func WS0_INDEX_felt_to_felt{
    syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr : felt
}(name : felt, index : felt) -> (res : felt):
    alloc_locals
    let (existing) = WARP_MAPPING0.read(name, index)
    if existing == 0:
        let (used) = WARP_USED_STORAGE.read()
        WARP_USED_STORAGE.write(used + 1)
        WARP_MAPPING0.write(name, index, used)
        return (used)
    else:
        return (existing)
    end
end

# Contract Def Whitelist

@storage_var
func WARP_STORAGE(index : felt) -> (val : felt):
end
@storage_var
func WARP_USED_STORAGE() -> (val : felt):
end
@storage_var
func WARP_NAMEGEN() -> (name : felt):
end
func readId{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr : felt}(
    loc : felt
) -> (val : felt):
    alloc_locals
    let (id) = WARP_STORAGE.read(loc)
    if id == 0:
        let (id) = WARP_NAMEGEN.read()
        WARP_NAMEGEN.write(id + 1)
        WARP_STORAGE.write(loc, id + 1)
        return (id + 1)
    else:
        return (id)
    end
end

namespace Whitelist:
    # Dynamic variables - Arrays and Maps

    const __warp_usrid1_whitelistedAddresses = 1

    # Static variables

    const __warp_usrid0_owner = 0

    func __warp_isWhitelisted_4{
        syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr : felt
    }(__warp_usrid2__address : felt, __warp_parameter2 : felt) -> (__warp_ret_paramter3 : felt):
        alloc_locals

        let __warp_ret_paramter3 = 0

        let (__warp_se_0) = WS0_INDEX_felt_to_felt(
            __warp_usrid1_whitelistedAddresses, __warp_usrid2__address
        )

        let (__warp_se_1) = WS0_READ_felt(__warp_se_0)

        with_attr error_message("Whitelist: You need to be whitelisted"):
            assert __warp_se_1 = 1
        end

        let (__warp_se_2) = __warp_original_function_exampleFunction_ce2f67a2(__warp_parameter2)

        let __warp_ret_paramter3 = __warp_se_2

        return (__warp_ret_paramter3)
    end

    func __warp_original_function_exampleFunction_ce2f67a2(__warp_usrid7__m_capture : felt) -> (
        __warp_usrid7_ : felt
    ):
        alloc_locals

        let __warp_usrid7_ = 0

        let __warp_usrid7_ = __warp_usrid7__m_capture

        return (1)
    end

    func __warp_onlyOwner_1{
        syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr : felt
    }(__warp_parameter0 : felt) -> ():
        alloc_locals

        let (__warp_se_3) = get_caller_address()

        let (__warp_se_4) = WS0_READ_felt(__warp_usrid0_owner)

        let (__warp_se_5) = warp_eq(__warp_se_3, __warp_se_4)

        with_attr error_message("Ownable: caller is not the owner"):
            assert __warp_se_5 = 1
        end

        __warp_original_function_addUser_421b2d8b(__warp_parameter0)

        return ()
    end

    func __warp_original_function_addUser_421b2d8b{
        syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr : felt
    }(__warp_usrid3__addressToWhitelist : felt) -> ():
        alloc_locals

        let (__warp_se_6) = WS0_INDEX_felt_to_felt(
            __warp_usrid1_whitelistedAddresses, __warp_usrid3__addressToWhitelist
        )

        WS_WRITE0(__warp_se_6, 1)

        return ()
    end

    @constructor
    func constructor{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr : felt}():
        alloc_locals
        WARP_USED_STORAGE.write(2)
        WARP_NAMEGEN.write(1)

        let (__warp_se_7) = get_caller_address()

        WS_WRITE0(__warp_usrid0_owner, __warp_se_7)

        return ()
    end

    @external
    func addUser_421b2d8b{syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr : felt}(
        __warp_usrid3__addressToWhitelist : felt
    ) -> ():
        alloc_locals

        warp_external_input_check_address(__warp_usrid3__addressToWhitelist)

        __warp_onlyOwner_1(__warp_usrid3__addressToWhitelist)

        return ()
    end

    @view
    func verifyUser_4d813120{
        syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr : felt
    }(__warp_usrid4__whitelistedAddress : felt) -> (__warp_usrid5_ : felt):
        alloc_locals

        warp_external_input_check_address(__warp_usrid4__whitelistedAddress)

        let (__warp_se_8) = WS0_INDEX_felt_to_felt(
            __warp_usrid1_whitelistedAddresses, __warp_usrid4__whitelistedAddress
        )

        let (__warp_usrid6_userIsWhitelisted) = WS0_READ_felt(__warp_se_8)

        return (__warp_usrid6_userIsWhitelisted)
    end

    @view
    func exampleFunction_ce2f67a2{
        syscall_ptr : felt*, pedersen_ptr : HashBuiltin*, range_check_ptr : felt
    }() -> (__warp_usrid7_ : felt):
        alloc_locals

        let __warp_usrid7_ = 0

        let (__warp_se_9) = get_caller_address()

        let (__warp_se_10) = __warp_isWhitelisted_4(__warp_se_9, __warp_usrid7_)

        return (__warp_se_10)
    end
end

# Original soldity abi: ["constructor()","","addUser(address)","verifyUser(address)","exampleFunction()"]